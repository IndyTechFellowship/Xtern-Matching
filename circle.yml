general:
  branches:
    only:
      - master
      
machine:
  environment:
    PYTHONPATH: $(PYTHONPATH):$(HOME)/google_appengine
    PATH: "${HOME}/go_appengine/:${PATH}"
    GOPATH: "${HOME}/go_appengine/gopath"
    GOROOT: "${HOME}/go_appengine/goroot"
    GCLOUD_PROJECT: "xtern-matching"

dependencies:
  pre:
    # Download App Engine SDK
    # This is not necessary to deploy, its only necessary  to run local tests importing the App Engine SDK
    - curl -o $HOME/go_appengine_sdk_linux_amd64-1.9.40.zip https://storage.googleapis.com/appengine-sdks/featured/go_appengine_sdk_linux_amd64-1.9.40.zip
    - unzip -q -d $HOME $HOME/go_appengine_sdk_linux_amd64-1.9.40.zip
    #- ls
    #- mv ../Combined ../Xtern-Matching
    - mkdir ../go_appengine/gopath/bin
    - mkdir ../go_appengine/gopath/pkg
    - mkdir ../go_appengine/gopath/src
    - cp -R ../Xtern-Matching ../go_appengine/gopath/src
    - echo $GCLOUD_SERVICE_KEY | base64 --decode > ${HOME}/gcloud-service-key.json
    - sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update
    - sudo apt-get install python-openssl
    - sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account ci-deploy@xtern-matching.iam.gserviceaccount.com --key-file ${HOME}/gcloud-service-key.json
    - sudo /opt/google-cloud-sdk/bin/gcloud config set project $GCLOUD_PROJECT
  override:
    # './...' is a relative pattern which means all subdirectories
    #- cd ../go_appengine/gopath/src/Xtern-Matching/core
    #- ln -s $HOME/go_appengine/gopath/src/Xtern-Matching/core $HOME/
    - goapp get ../go_appengine/gopath/src/Xtern-Matching/core
    - npm install ../go_appengine/gopath/src/Xtern-Matching/core
test:
  override:
  #TODO: Add tests
deployment:
    staging:
        branch: master
        commands:
            - sudo /opt/google-cloud-sdk/bin/gcloud -q app deploy ../go_appengine/gopath/src/Xtern-Matching/core/app.yaml